package com.example.mall.controller;

import com.example.mall.bean.Order;
import com.example.mall.bean.ProductOrder;
import com.example.mall.bean.Product_category;
import com.example.mall.exception.ProductNotFoundException;
import com.example.mall.repository.CategoryRepository;
import com.example.mall.repository.OrderRepository;
import com.example.mall.repository.ProductRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

import java.awt.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.List;

@Controller // This means that this class is a Controller
@RequestMapping(path="/order") // This means URL's start with /demo (after Application path)
public class OrderController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private OrderRepository repository;

    //    @RequestParam Integer productId, @RequestParam String name, @RequestParam String description, @RequestParam String keywords, @RequestParam String icon, @RequestParam Integer categoryId, @RequestParam Integer brandId
//            , @RequestParam String email
    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody
    String addNewProduct (@RequestBody Map<String,Object> params) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        Order order = new Order();
        String orderId = params.get("orderId").toString();
        order.setOrderId(orderId);
        String price = params.get("price").toString();
        order.setPrice(price);
        String createTime = params.get("createTime").toString();
        order.setCreateTime(createTime);
        String productsId = params.get("productsId").toString();
        order.setProductsId(productsId);
        repository.save(order);
        return "Saved";
    }

    @GetMapping(path="/get/")
    public @ResponseBody Iterable<Order> getAllProducts() {
        // This returns a JSON or XML with the users
        return repository.findAll();
    }

    @GetMapping(path = "/get/{id}")
    public @ResponseBody Order getProduct(@PathVariable Integer id) {
        return repository.findById(id).orElseThrow(() -> new ProductNotFoundException(id));
    }

    @PutMapping("/put/{id}")
    Order replaceProduct(@RequestBody Map<String,Object> params, @PathVariable Integer id) {

        return repository.findById(id)
                .map(order -> {
                    String orderId = params.get("orderId").toString();
                    order.setOrderId(orderId);
                    String price = params.get("price").toString();
                    order.setPrice(price);
                    String createTime = params.get("createTime").toString();
                    order.setCreateTime(createTime);
                    String productsId = params.get("productsId").toString();
                    order.setProductsId(productsId);
                    return repository.save(order);
                })
                .orElseGet(() -> {
                    Order order = new Order();
                    String orderId = params.get("orderId").toString();
                    order.setOrderId(orderId);
                    String price = params.get("price").toString();
                    order.setPrice(price);
                    String createTime = params.get("createTime").toString();
                    order.setCreateTime(createTime);
                    String productsId = params.get("productsId").toString();
                    order.setProductsId(productsId);
                    return repository.save(order);
                });
    }

    @DeleteMapping("/delete/{id}")
    void deleteEmployee(@PathVariable Integer id) {
        repository.deleteById(id);
    }

    @RequestMapping("/orderproducts.do")
    public ModelAndView findById(@RequestParam(name = "productsId", required = true) String productsId) throws Exception {

        ModelAndView view = new ModelAndView();
        ProductOrder productOrder = new ProductOrder();
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Order order = new Order();
        order.setOrderId(df.format(new Date()));
        order.setProductsId(productsId);
        order.setCreateTime(UUID.randomUUID().toString().replaceAll("-", ""));
        repository.save(order);
        productOrder.setDateString(df.format(new Date()));
        productOrder.setSid((UUID.randomUUID().toString().replaceAll("-", "")));
        productOrder.setPlist(repository.findProductsById(productsId));
        List<ProductOrder> objects = new ArrayList<ProductOrder>();
        objects.add(productOrder);
        view.addObject("orderlist", objects);
        view.setViewName("order-list");
        return view;
    }

}

